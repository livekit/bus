// Code generated by protoc-gen-psrpc v0.2.0, DO NOT EDIT.
// source: importer.proto

// Test to make sure that importing other packages doesnt break

package importer

import context "context"

import psrpc "github.com/livekit/psrpc"
import psrpc_internal_test_importable "github.com/livekit/psrpc/internal/test/importable"

// =====================
// Svc2 Client Interface
// =====================

type Svc2Client interface {
	Send(context.Context, *psrpc_internal_test_importable.Msg, ...psrpc.RequestOption) (*psrpc_internal_test_importable.Msg, error)
}

// =========================
// Svc2 ServerImpl Interface
// =========================

type Svc2ServerImpl interface {
	Send(context.Context, *psrpc_internal_test_importable.Msg) (*psrpc_internal_test_importable.Msg, error)
}

// =====================
// Svc2 Server Interface
// =====================

type Svc2Server interface {
	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ===========
// Svc2 Client
// ===========

type svc2Client struct {
	client *psrpc.RPCClient
}

// NewSvc2Client creates a psrpc client that implements the Svc2Client interface.
func NewSvc2Client(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (Svc2Client, error) {
	rpcClient, err := psrpc.NewRPCClient("Svc2", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &svc2Client{
		client: rpcClient,
	}, nil
}

func (c *svc2Client) Send(ctx context.Context, req *psrpc_internal_test_importable.Msg, opts ...psrpc.RequestOption) (*psrpc_internal_test_importable.Msg, error) {
	return psrpc.RequestSingle[*psrpc_internal_test_importable.Msg](ctx, c.client, "Send", "", req, opts...)
}

// ===========
// Svc2 Server
// ===========

type svc2Server struct {
	svc Svc2ServerImpl
	rpc *psrpc.RPCServer
}

// NewSvc2Server builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSvc2Server(serverID string, svc Svc2ServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (Svc2Server, error) {
	s := psrpc.NewRPCServer("Svc2", serverID, bus, opts...)

	var err error
	err = psrpc.RegisterHandler(s, "Send", "", svc.Send, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &svc2Server{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *svc2Server) Shutdown() {
	s.rpc.Close(false)
}

func (s *svc2Server) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor0 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x2d, 0xc8,
	0x2f, 0x2a, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x29, 0x28, 0x2e, 0x2a,
	0x48, 0xd6, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x2b, 0x49, 0x2d, 0x2e, 0xd1,
	0x83, 0xa9, 0x91, 0x12, 0x80, 0xb0, 0x12, 0x93, 0x72, 0x52, 0x21, 0xea, 0x8d, 0x22, 0xb8, 0x58,
	0x82, 0xcb, 0x92, 0x8d, 0x84, 0x02, 0xb8, 0x58, 0x82, 0x53, 0xf3, 0x52, 0x84, 0x94, 0xf5, 0x70,
	0x1b, 0x00, 0xd6, 0xe6, 0x5b, 0x9c, 0x2e, 0x45, 0x8c, 0x22, 0x27, 0xc3, 0x28, 0xfd, 0xf4, 0xcc,
	0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0x9c, 0xcc, 0xb2, 0xd4, 0xec, 0xcc, 0x12,
	0x7d, 0xb0, 0x46, 0x7d, 0x98, 0x46, 0x7d, 0x90, 0x46, 0x7d, 0x98, 0xf3, 0x92, 0xd8, 0xc0, 0x6e,
	0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x10, 0x21, 0xbe, 0xd5, 0x00, 0x00, 0x00,
}
