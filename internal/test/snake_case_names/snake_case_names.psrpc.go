// Code generated by protoc-gen-psrpc v0.2.1, DO NOT EDIT.
// source: snake_case_names.proto

// Test that protoc-gen-psrpc follows the same behavior as protoc-gen-go
// for converting RPCs and message names from snake case to camel case.

package snake_case_names

import context "context"

import psrpc "github.com/livekit/psrpc"

// ==============================
// HaberdasherV1 Client Interface
// ==============================

// A Haberdasher makes hats for clients.
type HaberdasherV1Client interface {
	MakeHatV1(context.Context, *MakeHatArgsV1_SizeV1, ...psrpc.RequestOption) (*MakeHatArgsV1_HatV1, error)
}

// ==================================
// HaberdasherV1 ServerImpl Interface
// ==================================

// A Haberdasher makes hats for clients.
type HaberdasherV1ServerImpl interface {
	MakeHatV1(context.Context, *MakeHatArgsV1_SizeV1) (*MakeHatArgsV1_HatV1, error)
}

// ==============================
// HaberdasherV1 Server Interface
// ==============================

// A Haberdasher makes hats for clients.
type HaberdasherV1Server interface {
	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ====================
// HaberdasherV1 Client
// ====================

type haberdasherV1Client struct {
	client *psrpc.RPCClient
}

// NewHaberdasherV1Client creates a psrpc client that implements the HaberdasherV1Client interface.
func NewHaberdasherV1Client(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (HaberdasherV1Client, error) {
	rpcClient, err := psrpc.NewRPCClient("HaberdasherV1", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &haberdasherV1Client{
		client: rpcClient,
	}, nil
}

func (c *haberdasherV1Client) MakeHatV1(ctx context.Context, req *MakeHatArgsV1_SizeV1, opts ...psrpc.RequestOption) (*MakeHatArgsV1_HatV1, error) {
	return psrpc.RequestSingle[*MakeHatArgsV1_HatV1](ctx, c.client, "MakeHatV1", "", req, opts...)
}

// ====================
// HaberdasherV1 Server
// ====================

type haberdasherV1Server struct {
	svc HaberdasherV1ServerImpl
	rpc *psrpc.RPCServer
}

// NewHaberdasherV1Server builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewHaberdasherV1Server(serverID string, svc HaberdasherV1ServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (HaberdasherV1Server, error) {
	s := psrpc.NewRPCServer("HaberdasherV1", serverID, bus, opts...)

	var err error
	err = psrpc.RegisterHandler(s, "MakeHatV1", "", svc.MakeHatV1, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &haberdasherV1Server{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *haberdasherV1Server) Shutdown() {
	s.rpc.Close(false)
}

func (s *haberdasherV1Server) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xce, 0x4b, 0xcc,
	0x4e, 0x8d, 0x4f, 0x4e, 0x2c, 0x4e, 0x8d, 0xcf, 0x4b, 0xcc, 0x4d, 0x2d, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x52, 0x29, 0x28, 0x2e, 0x2a, 0x48, 0xd6, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0xca,
	0x4b, 0xcc, 0xd1, 0x2b, 0x49, 0x2d, 0x2e, 0xd1, 0x43, 0x57, 0xab, 0x54, 0xcd, 0xc5, 0xe7, 0x9b,
	0x98, 0x9d, 0xea, 0x91, 0x58, 0xe2, 0x58, 0x94, 0x5e, 0x1c, 0x5f, 0x66, 0x28, 0xe5, 0xc6, 0xc5,
	0xe6, 0x91, 0x58, 0x12, 0x5f, 0x66, 0x28, 0x24, 0xc4, 0xc5, 0x52, 0x9c, 0x59, 0x95, 0x2a, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0x66, 0x0b, 0x89, 0x70, 0xb1, 0x26, 0xe7, 0xe7, 0xe4, 0x17,
	0x49, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x20, 0x95, 0x20, 0xe3, 0x24, 0x98, 0xc1,
	0x82, 0x60, 0xb6, 0x94, 0x22, 0x17, 0x7b, 0x70, 0x66, 0x55, 0x2a, 0xc8, 0x20, 0x31, 0x2e, 0xb6,
	0xcc, 0xbc, 0xe4, 0x8c, 0xd4, 0x62, 0xa8, 0x51, 0x50, 0x9e, 0xd1, 0x2c, 0x46, 0x2e, 0x3e, 0x8f,
	0xc4, 0xa4, 0xd4, 0xa2, 0x94, 0xc4, 0xe2, 0x8c, 0xd4, 0x22, 0x90, 0xd2, 0x76, 0x46, 0x2e, 0x2e,
	0xa8, 0x83, 0x40, 0x5c, 0x1b, 0x3d, 0x62, 0x7c, 0xa1, 0x87, 0xea, 0x05, 0x3d, 0xa8, 0xbd, 0x52,
	0xd6, 0x64, 0xe9, 0x86, 0x58, 0xed, 0x24, 0x12, 0x25, 0xa4, 0x6f, 0x8d, 0xae, 0x36, 0x89, 0x0d,
	0x1c, 0xb8, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x4f, 0x4c, 0xcd, 0x76, 0x01, 0x00,
	0x00,
}
