// Code generated by protoc-gen-psrpc v0.0.1, DO NOT EDIT.
// source: multiple2.proto

// Multiple proto files in one package

package multiple

import context "context"

import psrpc "github.com/livekit/psrpc"

// =====================
// Svc2 Client Interface
// =====================

type Svc2Client interface {
	Send(context.Context, *Msg2, ...psrpc.RequestOpt) (*Msg2, error)

	SamePackageProtoImport(context.Context, *Msg1, ...psrpc.RequestOpt) (*Msg1, error)
}

// =========================
// Svc2 ServerImpl Interface
// =========================

type Svc2ServerImpl interface {
	Send(context.Context, *Msg2) (*Msg2, error)

	SamePackageProtoImport(context.Context, *Msg1) (*Msg1, error)
}

// =====================
// Svc2 Server Interface
// =====================

type Svc2Server interface {
}

// ===========
// Svc2 Client
// ===========

type svc2Client struct {
	client psrpc.RPCClient
}

// NewSvc2Client creates a psrpc client that implements the Svc2Client interface.
func NewSvc2Client(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOpt) (Svc2Client, error) {
	rpcClient, err := psrpc.NewRPCClient("Svc2", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &svc2Client{
		client: rpcClient,
	}, nil
}

func (c *svc2Client) Send(ctx context.Context, req *Msg2, opts ...psrpc.RequestOpt) (*Msg2, error) {
	return psrpc.RequestTopicSingle[*Msg2](ctx, c.client, "Send", "", req, opts...)
}

func (c *svc2Client) SamePackageProtoImport(ctx context.Context, req *Msg1, opts ...psrpc.RequestOpt) (*Msg1, error) {
	return psrpc.RequestTopicSingle[*Msg1](ctx, c.client, "SamePackageProtoImport", "", req, opts...)
}

// ===========
// Svc2 Server
// ===========

type svc2Server struct {
	svc Svc2ServerImpl
	rpc psrpc.RPCServer
}

// NewSvc2Server builds a RPCServer that can be used to handle
// requests that are routed to the right method in the provided svc implementation.
func NewSvc2Server(serverID string, svc Svc2ServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOpt) (Svc2Server, error) {
	rpcServer := psrpc.NewRPCServer("Svc2", serverID, bus, opts...)

	var err error
	err = rpcServer.RegisterHandler(psrpc.NewHandler("Send", svc.Send))
	if err != nil {
		rpcServer.Close()
		return nil, err
	}

	err = rpcServer.RegisterHandler(psrpc.NewHandler("SamePackageProtoImport", svc.SamePackageProtoImport))
	if err != nil {
		rpcServer.Close()
		return nil, err
	}

	return &svc2Server{
		svc: svc,
		rpc: rpcServer,
	}, nil
}

var psrpcFileDescriptor1 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x2d, 0xcd, 0x29,
	0xc9, 0x2c, 0xc8, 0x49, 0x35, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x29, 0x28, 0x2e,
	0x2a, 0x48, 0xd6, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x2b, 0x49, 0x2d, 0x2e,
	0xd1, 0x83, 0x29, 0x92, 0x82, 0x2b, 0x37, 0x84, 0x28, 0x57, 0x62, 0xe3, 0x62, 0xf1, 0x2d, 0x4e,
	0x37, 0x32, 0xda, 0xc1, 0xc8, 0xc5, 0x12, 0x5c, 0x96, 0x6c, 0x24, 0xe4, 0xc7, 0xc5, 0x12, 0x9c,
	0x9a, 0x97, 0x22, 0xa4, 0xa4, 0x87, 0xcf, 0x20, 0x3d, 0x90, 0x26, 0x29, 0x22, 0xd4, 0x08, 0x25,
	0x70, 0x89, 0x05, 0x27, 0xe6, 0xa6, 0x06, 0x24, 0x26, 0x67, 0x27, 0xa6, 0xa7, 0x06, 0x80, 0x2c,
	0xf5, 0xcc, 0x2d, 0xc8, 0x2f, 0x2a, 0x21, 0xc2, 0x06, 0x43, 0x22, 0x6c, 0x30, 0x74, 0xe2, 0x8e,
	0xe2, 0xd4, 0x87, 0x89, 0x24, 0xb1, 0x81, 0xbd, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x06,
	0x9e, 0x42, 0x70, 0x18, 0x01, 0x00, 0x00,
}
