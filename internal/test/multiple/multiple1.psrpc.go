// Code generated by protoc-gen-psrpc v0.2.0, DO NOT EDIT.
// source: multiple1.proto

// Multiple proto files in one package

package multiple

import context "context"

import psrpc "github.com/livekit/psrpc"

// =====================
// Svc1 Client Interface
// =====================

type Svc1Client interface {
	Send(context.Context, *Msg1, ...psrpc.RequestOption) (*Msg1, error)
}

// =========================
// Svc1 ServerImpl Interface
// =========================

type Svc1ServerImpl interface {
	Send(context.Context, *Msg1) (*Msg1, error)
}

// =====================
// Svc1 Server Interface
// =====================

type Svc1Server interface {
	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ===========
// Svc1 Client
// ===========

type svc1Client struct {
	client *psrpc.RPCClient
}

// NewSvc1Client creates a psrpc client that implements the Svc1Client interface.
func NewSvc1Client(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (Svc1Client, error) {
	rpcClient, err := psrpc.NewRPCClient("Svc1", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &svc1Client{
		client: rpcClient,
	}, nil
}

func (c *svc1Client) Send(ctx context.Context, req *Msg1, opts ...psrpc.RequestOption) (*Msg1, error) {
	return psrpc.RequestSingle[*Msg1](ctx, c.client, "Send", "", req, opts...)
}

// ===========
// Svc1 Server
// ===========

type svc1Server struct {
	svc Svc1ServerImpl
	rpc *psrpc.RPCServer
}

// NewSvc1Server builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSvc1Server(serverID string, svc Svc1ServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (Svc1Server, error) {
	s := psrpc.NewRPCServer("Svc1", serverID, bus, opts...)

	var err error
	err = psrpc.RegisterHandler(s, "Send", "", svc.Send, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &svc1Server{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *svc1Server) Shutdown() {
	s.rpc.Close(false)
}

func (s *svc1Server) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor0 = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x2d, 0xcd, 0x29,
	0xc9, 0x2c, 0xc8, 0x49, 0x35, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x29, 0x28, 0x2e,
	0x2a, 0x48, 0xd6, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x2b, 0x49, 0x2d, 0x2e,
	0xd1, 0x83, 0x29, 0x52, 0x62, 0xe3, 0x62, 0xf1, 0x2d, 0x4e, 0x37, 0x34, 0x0a, 0xe3, 0x62, 0x09,
	0x2e, 0x4b, 0x36, 0x14, 0xf2, 0xe3, 0x62, 0x09, 0x4e, 0xcd, 0x4b, 0x11, 0x52, 0xd2, 0xc3, 0xa7,
	0x4d, 0x0f, 0xa4, 0x47, 0x8a, 0x08, 0x35, 0x4e, 0xdc, 0x51, 0x9c, 0xfa, 0x30, 0x91, 0x24, 0x36,
	0xb0, 0x8b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x3d, 0x3e, 0x25, 0xa4, 0x00, 0x00,
	0x00,
}
