// Code generated by protoc-gen-psrpc v0.0.1, DO NOT EDIT.
// source: no_package_name.proto

package no_package_name

import context "context"

import psrpc "github.com/livekit/psrpc"

// ====================
// Svc Client Interface
// ====================

type SvcClient interface {
	Send(context.Context, *Msg, ...psrpc.RequestOpt) (*Msg, error)
}

// ========================
// Svc ServerImpl Interface
// ========================

type SvcServerImpl interface {
	Send(context.Context, *Msg) (*Msg, error)
}

// ====================
// Svc Server Interface
// ====================

type SvcServer interface {
}

// ==========
// Svc Client
// ==========

type svcClient struct {
	client psrpc.RPCClient
}

// NewSvcClient creates a psrpc client that implements the SvcClient interface.
func NewSvcClient(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOpt) (SvcClient, error) {
	rpcClient, err := psrpc.NewRPCClient("Svc", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &svcClient{
		client: rpcClient,
	}, nil
}

func (c *svcClient) Send(ctx context.Context, req *Msg, opts ...psrpc.RequestOpt) (*Msg, error) {
	return psrpc.RequestTopicSingle[*Msg](ctx, c.client, "Send", "", req, opts...)
}

// ==========
// Svc Server
// ==========

type svcServer struct {
	svc SvcServerImpl
	rpc psrpc.RPCServer
}

// NewSvcServer builds a RPCServer that can be used to handle
// requests that are routed to the right method in the provided svc implementation.
func NewSvcServer(serverID string, svc SvcServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOpt) (SvcServer, error) {
	rpcServer := psrpc.NewRPCServer("Svc", serverID, bus, opts...)

	var err error
	err = rpcServer.RegisterHandler(psrpc.NewHandler("Send", svc.Send))
	if err != nil {
		rpcServer.Close()
		return nil, err
	}

	return &svcServer{
		svc: svc,
		rpc: rpcServer,
	}, nil
}

var psrpcFileDescriptor0 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xcb, 0x8f, 0x2f,
	0x48, 0x4c, 0xce, 0x4e, 0x4c, 0x4f, 0x8d, 0xcf, 0x4b, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x57, 0x62, 0xe5, 0x62, 0xf6, 0x2d, 0x4e, 0x37, 0x92, 0xe4, 0x62, 0x0e, 0x2e, 0x4b, 0x16,
	0x12, 0xe2, 0x62, 0x09, 0x4e, 0xcd, 0x4b, 0x11, 0x62, 0xd1, 0xf3, 0x2d, 0x4e, 0x97, 0x02, 0x93,
	0x4e, 0x16, 0x51, 0x66, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x39,
	0x99, 0x65, 0xa9, 0xd9, 0x99, 0x25, 0xfa, 0x05, 0xc5, 0x45, 0x05, 0xc9, 0xfa, 0x99, 0x79, 0x25,
	0xa9, 0x45, 0x79, 0x89, 0x39, 0xfa, 0x25, 0xa9, 0xc5, 0x25, 0xfa, 0x68, 0x36, 0x24, 0xb1, 0x81,
	0xad, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x79, 0xb2, 0x2e, 0x0a, 0x7b, 0x00, 0x00, 0x00,
}
