// Code generated by protoc-gen-psrpc v0.2.0, DO NOT EDIT.
// source: importer_local.proto

package importer_local

import context "context"

import psrpc "github.com/livekit/psrpc"

// ====================
// Svc Client Interface
// ====================

type SvcClient interface {
	Send(context.Context, *Msg, ...psrpc.RequestOption) (*Msg, error)
}

// ========================
// Svc ServerImpl Interface
// ========================

type SvcServerImpl interface {
	Send(context.Context, *Msg) (*Msg, error)
}

// ====================
// Svc Server Interface
// ====================

type SvcServer interface {
	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ==========
// Svc Client
// ==========

type svcClient struct {
	client *psrpc.RPCClient
}

// NewSvcClient creates a psrpc client that implements the SvcClient interface.
func NewSvcClient(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (SvcClient, error) {
	rpcClient, err := psrpc.NewRPCClient("Svc", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &svcClient{
		client: rpcClient,
	}, nil
}

func (c *svcClient) Send(ctx context.Context, req *Msg, opts ...psrpc.RequestOption) (*Msg, error) {
	return psrpc.RequestSingle[*Msg](ctx, c.client, "Send", "", req, opts...)
}

// ==========
// Svc Server
// ==========

type svcServer struct {
	svc SvcServerImpl
	rpc *psrpc.RPCServer
}

// NewSvcServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSvcServer(serverID string, svc SvcServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (SvcServer, error) {
	s := psrpc.NewRPCServer("Svc", serverID, bus, opts...)

	var err error
	err = psrpc.RegisterHandler(s, "Send", "", svc.Send, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &svcServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *svcServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *svcServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor0 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xcc, 0x2d, 0xc8,
	0x2f, 0x2a, 0x49, 0x2d, 0x8a, 0xcf, 0xc9, 0x4f, 0x4e, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x52, 0x2a, 0x28, 0x2e, 0x2a, 0x48, 0xd6, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc,
	0xd1, 0x2b, 0x49, 0x2d, 0x2e, 0xd1, 0x43, 0x55, 0x29, 0x25, 0x8d, 0xca, 0x8f, 0xcf, 0x2d, 0x4e,
	0x4f, 0x49, 0x4d, 0x83, 0x18, 0x60, 0x14, 0xcf, 0xc5, 0x1c, 0x5c, 0x96, 0x2c, 0x14, 0xc1, 0xc5,
	0x12, 0x9c, 0x9a, 0x97, 0x22, 0xa4, 0xae, 0x47, 0xd8, 0x40, 0x3d, 0xdf, 0xe2, 0x74, 0x29, 0x62,
	0x15, 0x3a, 0x99, 0x47, 0x99, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0xe7, 0x64, 0x96, 0xa5, 0x66, 0x67, 0x96, 0xe8, 0x83, 0x35, 0xeb, 0xc3, 0x34, 0xeb, 0x83, 0x34,
	0xeb, 0xa3, 0x6a, 0x4e, 0x62, 0x03, 0x3b, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x18, 0x5a,
	0x95, 0x49, 0xf9, 0x00, 0x00, 0x00,
}
